// Generated by CoffeeScript 1.9.3
var Accordion, Badge, Button, Col, CompetitionCheck, Glyphicon, ListGroup, ListGroupItem, Panel, TestGroup, TestGroupItem, update;

ListGroupItem = ReactBootstrap.ListGroupItem;

ListGroup = ReactBootstrap.ListGroup;

Accordion = ReactBootstrap.Accordion;

Panel = ReactBootstrap.Panel;

Button = ReactBootstrap.Button;

Glyphicon = ReactBootstrap.Glyphicon;

Col = ReactBootstrap.Col;

Badge = ReactBootstrap.Badge;

update = React.addons.update;

TestGroupItem = React.createClass({displayName: "TestGroupItem",
  render: function() {
    var elapsedDisplay, glyphName, glyphStyle;
    glyphName = "asterik";
    glyphStyle = "";
    switch (this.props.status) {
      case "waiting":
        glyphName = "refresh";
        glyphStyle = "spin";
        break;
      case "failing":
        glyphName = "remove";
        break;
      case "passing":
        glyphName = "ok";
    }
    elapsedDisplay = "...";
    if (this.props.elapsed) {
      elapsedDisplay = (parseFloat(this.props.elapsed).toFixed(1)) + " secs";
    }
    return React.createElement(ListGroupItem, null, React.createElement("h4", null, React.createElement(Glyphicon, {
      "glyph": glyphName,
      "className": glyphStyle
    }), " ", this.props.name, " ", React.createElement("span", {
      "className": "pull-right"
    }, elapsedDisplay)));
  }
});

TestGroup = React.createClass({displayName: "TestGroup",
  getInitialState: function() {
    var state;
    state = {};
    _.map(this.props.tests, function(test) {
      state[test.name] = test;
      state[test.name].status = "waiting";
      return state[test.name].start = Date.now();
    });
    return state;
  },
  updateTestState: function(testName, status) {
    var newState, totalStatus, updateObject;
    updateObject = {};
    updateObject[testName] = {
      status: {
        $set: status
      },
      elapsed: {
        $set: (Date.now() - this.state[testName].start) / 1000.0
      }
    };
    newState = update(this.state, updateObject);
    totalStatus = "passing";
    if (_.any(newState, function(test) {
      return test.status === "waiting";
    })) {
      totalStatus = "waiting";
    } else if (_.any(newState, function(test) {
      return test.status === "failing";
    })) {
      totalStatus = "failing";
    }
    this.setState(newState);
    return this.props.onStatusChange(totalStatus);
  },
  componentWillMount: function() {
    return _.each(this.state, (function(test, testName) {
      return test.func(this.updateTestState.bind(null, testName));
    }).bind(this));
  },
  render: function() {
    return React.createElement(Panel, null, React.createElement(ListGroup, {
      "fill": true
    }, _.map(_.values(this.state), function(test, i) {
      return React.createElement(TestGroupItem, React.__spread({
        "key": i
      }, test));
    })));
  }
});

CompetitionCheck = React.createClass({displayName: "CompetitionCheck",
  getInitialState: function() {
    return {
      competitionReadiness: "waiting"
    };
  },
  alwaysTrue: function(t, setStatus) {
    return setTimeout(setStatus.bind(null, t), Math.random() * 3000);
  },
  onStatusChange: function(status) {
    return this.setState(update(this.state, {
      competitionReadiness: {
        $set: status
      }
    }));
  },
  render: function() {
    var sanityChecks;
    sanityChecks = [
      {
        name: "Just Checking 1",
        func: this.alwaysTrue.bind(null, "passing")
      }, {
        name: "Just Checking 2",
        func: this.alwaysTrue.bind(null, "passing")
      }, {
        name: "Just Checking 3",
        func: this.alwaysTrue.bind(null, "passing")
      }
    ];
    return React.createElement("div", null, React.createElement("h3", null, "Competition Status: ", React.createElement("b", null, this.state.competitionReadiness)), React.createElement(Col, {
      "md": 6.,
      "className": "hard-right"
    }, React.createElement(TestGroup, {
      "tests": sanityChecks,
      "onStatusChange": this.onStatusChange
    })));
  }
});
